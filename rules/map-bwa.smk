import os

configfile: "config.yaml"

# user specified configs
seq_dir = config["seq_directory"]
nbins = config["EMA_bins"]
genomefile = config["genome_file"]

# this identifies whether .fastq.gz or .fq.gz is used as the file extension
fastqlist = [i for i in os.listdir(seq_dir) if i.endswith('.fastq.gz')]
fqext = "fq.gz" if not fastqlist else "fastq.gz"

Rlist = [i for i in os.listdir(seq_dir) if i.endswith('.R1.' + fqext)]
Rsep = "_R" if not Rlist else ".R"

# the samples config is generated by an external script that appends it to the config.yaml
samplenames = set([i.split('.')[0] for i in os.listdir(seq_dir) if i.endswith(fqext)])

rule all:
	input: 
		alignments = expand("ReadMapping/align/{sample}.bam", sample = samplenames),
		stats = expand("ReadMapping/align/stats/{sample}.stats", sample = samplenames),
		flagstat = expand("ReadMapping/align/flagstat/{sample}.flagstat", sample = samplenames)
	message: "Read mapping completed! Generating alignment reports ReadMapping/alignment.stats.html and ReadMapping/alignment.flagstat.html."
	shell:
		"""
		multiqc ReadMapping/align/stats --force --quiet --filename ReadMapping/alignment.stats.html
		multiqc ReadMapping/align/flagstat --force --quiet --filename ReadMapping/alignment.flagstat.html
		"""

rule index_genome:
	input: genomefile
	output: multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
	message: "Indexing {input} prior to read mapping"
	shell: 
		"""
		bwa index {input}
		samtools faidx {input}
		"""

rule bwa_align:
	input:
		forward_reads = seq_dir + "/{sample}" + Rsep + "1." + fqext,
		reverse_reads = seq_dir + "/{sample}" + Rsep + "2." + fqext,
		genome = genomefile,
		genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
	output:  pipe("ReadMapping/align/{sample}.sam")
	wildcard_constraints:
		sample = "[a-zA-Z0-9_-]*"
	message: "Mapping {wildcards.sample} reads onto {input.genome} using BWA"
	log: "ReadMapping/count/logs/{sample}.count.log"
	params:
		prefix = "{wildcards.sample}"
	threads: 2
	shell:
		"""
		bwa mem -p -C -t {threads} -M -R "@RG\tID:{params}\tSM:{params}" {input.genome} {input.forward_reads} {input.reverse_reads}
		"""

rule bwa_sort:
	input: "ReadMapping/align/{sample}.sam"
	output: 
		bam = temp("ReadMapping/align/{sample}.bam.tmp"),
		stats = "ReadMapping/align/{sample}.stats",
		flagstat = "ReadMapping/align/{sample}.flagstat"
	wildcard_constraints:
		sample = "[a-zA-Z0-9_-]*"
	message: "Sorting {wildcards.sample} alignments"
	threads: 2
	shell:
		"""
		samtools sort -@ {threads} -O bam -l 0 -m 4G -o {output} -
		"""

rule mark_duplicates:
	input: "ReadMapping/align/{sample}.bam.tmp"
	output: 
		bam = "ReadMapping/align/{sample}.bam",
		stats = "ReadMapping/align/stats/{sample}.stats",
		flagstat = "ReadMapping/align/flagstat/{sample}.flagstat"
	wildcard_constraints:
		sample = "[a-zA-Z0-9_-]*"
	message: "Marking duplicates with Sambamba for {wildcards.sample} alignments and calculating alignment stats"
	threads: 4
	shell:
		"""
		sambamba markdup -t {threads} -p -l 0 {input} {output}
		samtools index {output.bam}
		samtools stats {output.bam} > {output.stats}
		samtools flagstat {output.bam} > {output.flagstat}
		"""
 
 