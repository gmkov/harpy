import os
configfile: "config.yaml"

# sanity check of the multiplexed sequences performed earlier in bash script
# this identifies whether .fastq.gz or .fq.gz is used as the file extension
fastqlist = [i for i in os.listdir(config["seq_directory"]) if i.endswith('.fastq.gz')]
fqext = "fq.gz" if not fastqlist else "fastq.gz"

# the samples config is generated by an external script that appends it to the config.yaml
samplenames = [i.split('.')[0] for i in os.listdir(config["seq_directory"]) if i.endswith(fqext)]
#samplenames = [config["samples"][i]["name"] for i in config["samples"]]
# user specified configs
nbins = config["EMA_bins"]
genomefile = config["genome_file"]

rule all:
    input: 
        alignments = expand("ReadMapping/align/{sample}.bam", sample = samplenames),
        stats = expand("ReadMapping/align/stats/{sample}.stats", sample = samplenames),
        flagstat = expand("ReadMapping/align/flagstat/{sample}.flagstat", sample = samplenames)
    message: "Read mapping completed! Generating alignment reports ReadMapping/alignment.stats.html and ReadMapping/alignment.flagstat.html."
    shell:
        """
        multiqc ReadMapping/align/stats --force --quiet --filename ReadMapping/alignment.stats.html
        multiqc ReadMapping/align/flagstat --force --quiet --filename ReadMapping/alignment.flagstat.html
        """


rule index_genome:
    input: genomefile
    output: emultiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
    message: "Indexing {input} prior to read mapping"
    shell: 
        """
        bwa index {input}
        samtools faidx {input}
        """

rule ema_count:
    input:
        forward = "ReadsTrimmed/{sample}" + ".R1." + fqtext,
        reverse = "ReadsTrimmed/{sample}" + ".R2." + fqtext
    output: 
        whitelist = "ReadMapping/barcodes/{sample}.barcodes",
        counts = "ReadMapping/count/{sample}.ema-ncnt"
    message: "Creating barcode whitelist for {wildcards.sample} and counting barcode frequency"
    log: "ReadMapping/count/logs/{sample}.count.log"
    params:
        prefix = "{wildcards.sample}"
    threads: 1
    shell:
        """
        createBXWhitelist {input.forward} > {output.whitelist}
        emaInterleave {input.forward} {input.reverse} | ema-h count -w {output.whitelist} -o {params} 2> {log}
        """

rule ema_preprocess:
    input: 
        forward = "ReadsTrimmed/{sample}" + ".R1." + fqtext,
        reverse = "ReadsTrimmed/{sample}" + ".R2." + fqtext,
        whitelist = "ReadMapping/barcodes/{sample}.barcodes",
        emacounts = "ReadMapping/count/{sample}.ema-ncnt"
    output: 
        bins = temp(expand("ReadMapping/preproc/{sample}/ema-bin-{bin}", bin = range(1, nbins+1))),
        unbarcoded = temp("ReadMapping/preproc/{sample}/ema-nobc")
    log: "ReadMapping/preproc/logs/{sample}.preproc.log"
    message: "Preprocessing {wildcards.sample} for mapping with EMA"
    threads: 2
    params:
        outdir = "{wildcards.sample}",
        bins = nbins
    shell:
        """
        emaInterleave {input.forward} {input.reverse} | ema-h preproc -w {input.whitelist} -p -b -n {params.bins} -t {threads} -o {params.outdir} {input.emacounts} 2>&1 {log}
        """

#rule ema_align:
#    input:
#        readbin = "ReadMapping/preproc/{sample}/ema-bin-{bin}",
#        genome = genomefile,
#        genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
#    output: temp("ReadMapping/align/{sample}/{sample}-{bin}.bam")
#    message: "mapping: {wildcards.sample} | bin: {wildcards.bin} onto {input.genome}"
#    threads: 4
#    params:
#        sampleID = "{wildcards.sample}",
#        threads = 2
#    shell:
#        """
#        ema align -t {params.threads} -d -i -r {input.genome} -R '@RG\tID:{params.sampleID}\tSM:{params.sampleID}' -s {input.readbin} |\
#        samtools sort -@ {params.threads} -O bam -l 0 -m 4G -o {output} -
#        """

### pipe design ###
rule ema_align:
    input:
        readbin = "ReadMapping/preproc/{sample}/ema-bin-{bin}",
        genome = genomefile,
        genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
    output: pipe("ReadMapping/align/{sample}/{sample}-{bin}.sam")
    message: "mapping: {wildcards.sample} | bin: {wildcards.bin} onto {input.genome}"
    threads: 2
    params:
        sampleID = "{wildcards.sample}"
    shell:
        """
        ema-h align -t {threads} -p haptag -d -i -r {input.genome} -R '@RG\tID:{params}\tSM:{params}' -s {input.readbin} 2> /dev/null
        """

rule ema_sort:
    input: "ReadMapping/align/{sample}/{sample}-{bin}.sam"
    output: "ReadMapping/align/{sample}/{sample}-{bin}.bam"
    message: "Sorting {wildcards.sample}-{wildcards.bin} with Samtools"
    threads: 2
    shell: 
        """
        samtools sort -@ {threads} -O bam -l 0 -m 4G -o {output} -
        """
###

#rule ema_align_nobarcode:
#     input:
#        reads = "ReadMapping/preproc/{sample}/ema-nobc",
#        genome = genomefile,
#        genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
#    output: 
#        unmarked = temp("ReadMapping/align/{sample}/{sample}-nobc.tmp"),
#        markdup = temp("ReadMapping/align/{sample}/{sample}-nobc.bam")
#    message: "Mapping unbarcoded {wildcards.sample} reads onto {input.genome}"
#    threads: 4
#    params:
#        sampleID = "{wildcards.sample}",
#        threads = 2
#    shell:
#        """
#        bwa mem -p -t {params.threads} -M -R "@RG\tID:{params.sampleID}\tSM:{params.sampleID}" {input.genome} {input.reads} |\
#        samtools sort -@ {params.threads} -O bam -l 0 -m 4G -o {output.unmarked} -
#        sambamba markdup -t {threads} -p -l 0 {output.unmarked} {output.markdup}
#        """

#### alternative pipe strategy ####
rule ema_align_nobarcode:
     input:
        reads = "ReadMapping/preproc/{sample}/ema-nobc",
        genome = genomefile,
        genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
    output: pipe("ReadMapping/align/{sample}/{sample}-nobc.sam")
    message: "Mapping unbarcoded {wildcards.sample} reads onto {input.genome}"
    threads: 2
    params:
        sampleID = "{wildcards.sample}"
    shell:
        """
        bwa mem -p -t {threads} -M -R "@RG\tID:{params}\tSM:{params}" {input.genome} {input.reads}
        """

rule sort_nobarcode_alignments:
    input: "ReadMapping/align/{sample}/{sample}-nobc.sam"
    output: temp("ReadMapping/align/{sample}/{sample}-nobc.bam.tmp")
    message: "Sorting {wildcards.sample} unbarcoded alignments"
    threads: 2
    shell:
        """
        samtools sort -@ {threads} -O bam -l 0 -m 4G -o {output} -
        """    

rule markduplicates_nobarcode:
    input: "ReadMapping/align/{sample}/{sample}-nobc.bam.tmp"
    output: "ReadMapping/align/{sample}/{sample}-nobc.bam"
    message: "Marking duplicates with Sambamba for {wildcards.sample} unbarcoded alignments"
    threads: 4
    shell:
        """
        sambamba markdup -t {threads} -p -l 0 {input} {output}
        """   
###########

### Alternative alignment option ###
# Need to decide which is better to use for this 
#rule ema_align_allatonce:
#    input:
#        readbin = expand("ReadMapping/preproc/{sample}/ema-bin-{bin}", bin = range(1, nbins+1)),
#        genome = genomefile,
#        genome_idx = multiext(genomefile, ".ann", ".bwt", ".fai", ".pac", ".sa", ".amb")
#    output: pipe("ReadMapping/align/{sample}.bam.pipe")
#    message: "Mapping {wildcards.sample} onto {input.genome}"
#    threads: 2
#    params:
#        sampleID = "{wildcards.sample}"
#    shell:
#        """
#        ema align -t {threads} -d -i -r {input.genome} -R '@RG\tID:{params}\tSM:{params}' {input.readbin}
#        """
#rule ema_sort_allatonce:
#    input: "ReadMapping/align/{sample}.bam.pipe"
#    output: "ReadMapping/align/{sample}.bam"
#    message: "Sorting {wildcards.sample} with Samtools"
#    threads: 2
#    shell:
#        """
#        samtools sort -@ {threads} -O bam -l 0 -m 4G -o {output} -
#        """
##### ----------------------------- ######

rule merge_alignments:
    input:
        aln_barcoded = expand("ReadMapping/align/{sample}/{sample}-{bin}.bam", bin = range(1, nbins + 1)),
        aln_nobarcode = "ReadMapping/align/{sample}/{sample}-nobc.bam"
    output: 
        bam = "ReadMapping/align/{sample}.bam",
        stats = "ReadMapping/align/stats/{sample}.stats",
        flagstat = "ReadMapping/align/flagstat/{sample}.flagstat"
    message: "Merging all the alignments for {wildcards.sample}"
    threads: 10
    shell:
        """
        sambamba merge -t {threads} -p {output.bam} {input}
        samtools stats {output.bam} > {output.stats}
        samtools flagstat {output.bam} > {output.flagstat}
        """