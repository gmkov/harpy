#! /usr/bin/env bash

info() {
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color
docstring="Demultiplex haplotagged raw sequences, separating out individual-barcoded samples from a large pool of samples (multiplex) stored in gzipped FASTQ files. Barcodes correspond to identifiers in the read headers. Multiplexed paired-end reads must use the R1/R2 naming convention in their file names. Requires a delimited file (no header) containing sample information (see below)."
printf '%s\n' "$docstring" | fold -s
printf "\n${BOLD}[ usage ]: harpy-demux -s sampleInfoFile -t numThreads -d seqDirectory${NC}\n"
printf "[example]: harpy-demux -s samples.txt -t 25 -d rawseqs\n\n"

printf "${YELLOW}-s${NC} : sample information file in tab/comma/space delimited format:\n"
printf "     ${BOLD}Column 1${NC} : basename of multiplexed fastq file\n"
printf "       - everything but extensions (e.g. ignore \".R1.fq.gz\")\n"
printf "     ${BOLD}Column 2${NC} : index\n"
printf "     ${BOLD}Column 3${NC} : sample name\n"
printf "     ${BOLD}Column 4+${NC}: ignored\n"
printf "     Can also be a YAML-format file previously generated by harpy-demux\n"
printf "${YELLOW}-t${NC} : optional, number of parallel threads (default: 1)\n"
printf "${YELLOW}-d${NC} : optional, directory containing raw sequences (default: SeqRaw)\n"
cat <<EOF

           [example sample info file]
Cacronotus1	C01 SC001	SC	Illumina
Cacronotus2	C02 SC002	SC	Illumina
Cacronotus3	C03 SC003	SC	Illumina
EOF
}

if [[ -z "$1" ]]; then
    info
    exit 0
fi

nthreads=1
WORKDIR=./SeqRaw

while getopts "t:d:s:h" opt; do
  case $opt in
    s)
        INFILE=$OPTARG
        if [ ! -f $INFILE ]; then
            echo "ERROR: File $OPTARG not found" >&2
            echo "Check the spelling or if the file exists and try again." >&2
            exit 1
        fi
        ;;
    t)
        nthreads=$OPTARG
        # Make sure it's an integer
        re='^[0-9]+$'
        if ! [[ $nthreads =~ $re ]] ; then
            echo "ERROR: threads must be given as an integer" >&2
            exit 1
        fi
        ;;
    d)
        WORKDIR=$OPTARG
        if [ ! -d $OPTARG ]; then
            echo "ERROR: Directory $WORKDIR not found" >&2
            echo "Check the spelling and the state of your project directory and try again." >&2
            exit 1
        fi
        if [ "$(ls -A $WORKDIR | grep -i \\.fq.gz\$)" ] && [ "$(ls -A $WORKDIR | grep -i \\.fastq.gz\$)" ]; then
            echo -e "ERROR: Files with both extensions (.fastq.gz and .fq.gz) detected in $WORKDIR.\nMultiplexed sequences must end in only one of .fastq.gz or .fq.gz" >&2
            exit 1
        elif [ ! "$(ls -A $WORKDIR | grep -i \\.fq.gz\$)" ] && [ ! "$(ls -A $WORKDIR | grep -i \\.fastq.gz\$)" ]; then
            echo -e "ERROR: No files with extensions .fastq.gz or .fq.gz detected in $WORKDIR.\nMultiplexed sequences must end in only one of .fastq.gz or .fq.gz" >&2
            exit 1
        fi
        ;;
	\?)
        exit 1
        ;;
    h | *)
        info
        exit 0
        ;;
    :)
        echo "ERROR: -$OPTARG requires an argument. See usage with -h" >&2
        exit 1
        ;;
  esac
done

# Set the correct name with the new extension
CONF=${INFILE%.*}.yaml

if [ -f $CONF ]; then
    echo "Sample configuration YAML file ($CONF) detected, skipping conversion to YAML."
else
    # Generate configuration yaml for demultiplexing
    utilities/demux.config.py -f $INFILE -d $WORKDIR -s 3 -i 2
fi
exit 0
snakemake --core $nthreads --use-conda --snakefile rules/demultiplex.smk --configfile $CONF --directory . --dryrun