[[{"l":"Home","p":["Harpy is a haplotagging data processing pipeline for Linux-based systems. It uses all the magic of Snakemake under the hood to handle the worklfow decision-making, but as a user, you just interact with it like a normal command-line"]},{"i":"what-is-haplotagging","l":"What is haplotagging?","p":["Linked-read sequencing exists to combine the throughput and accuracy of short-read sequencing with the long range haplotype information of long-read sequencing. Haplotagging is an implementation of linked-read sequencing developed by"]},{"l":"Harpy Modules","p":["Harpy is modular, meaning you can use different parts of it independent from each other. Need to only align reads? Great! Only want to call variants? Awesome! All modules are called by"]},{"l":"Using Harpy","p":["You can call harpy without any arguments (or with --help) to print the docstring to your terminal. You can likewise call any of the modules with --help to see their usage (e.g."]}],[{"l":"Install HARPY"},{"l":"Clone the repository","p":["Until this pipeline gets completed and hosted on Bioconda, it will be available by cloning/downloading the repository."]},{"l":"Install the dependencies","p":["The dependencies can be installed into a conda environment using the provided harpyenv.yaml:"]},{"l":"Activate the environment","p":["The environment with all the preinstalled dependencies can be activated with:"]}],[{"l":"Before you start"},{"l":"Required files and formats","p":["Before you start using Harpy for your haplotagging data processing, you will need to make sure you have a few things on hand for things to go smoothly. At the minimum, you will need:"]},{"l":"Adding additional Snakamake parameters","p":["Harpy relies on Snakemake under the hood to handle file and job dependencies. Most of these details have been abstracted away from the end-user, but every module of Harpy (except"]},{"l":"Reserved arguments","p":["Harpy calls Snakemake using specific arguments, meaning you cannot append these again to the internal command line call. Well, you can, but Snakemake will error and exit. Everything else"]},{"l":"Use cases","p":["You likely wont need to invoke --snakemake very often, if ever. That being said, here are what might be the most common use cases for this parameter."]},{"l":"Dry run"},{"i":"--dry-run","l":"--dry-run","p":["This is a directive in which Snakemake will build the DAG and \"pretend\" to run the Harpy workflow. Useful for knowing what you're getting yourself into ahead of time. It's also useful for debugging during development."]},{"l":"Rerun an incomplete workflow"},{"i":"--rerun-incomplete","l":"--rerun-incomplete","p":["There will be plenty of reasons that Harpy/Snakemake might end prematurely, like corrupt files, system errors, insufficient resources, etc. When this happens, Snakemake has a save-state in the"]},{"l":"Specific file target","p":["Sometimes you want to generate a specific intermediate file (or files) rather than running the entire module to completion. For example, you want the beadtag report Harpy makes from the output of"]},{"l":"Set a shadow directory"},{"i":"--shadow-prefix-dirname","l":"--shadow-prefix dirname","p":["If running Harpy on an HPC, your system administrator may enforce a policy that all data needs to be moved to a particular network-attached storage for execution. On some systems this is called a"]},{"i":"snakemake-etc","l":"Snakemake etc.","p":["Sometimes Snakemake might scold/warn you about something you didn't realize you did. One common case is when you prematurely terminate Harpy with ctrl + c or by terminating the process by other means. You might try to rerun Harpy afterwards and be met with a"]}],[{"l":"Generate Extra Files","p":["Some parts of Harpy (variant calling, imputation) want or need extra files. You can create various files necessary for different modules using the harpy extra module:"]},{"l":"Running Options"},{"l":"popgroup"},{"l":"stitch-params"},{"l":"hpc"}],[{"l":"Quality Trimming Sequence Data","p":["Raw sequences are not suitable for downstream analyses. They have sequencing adapters, index sequences, regions of poor quality, etc. The first step of any genetic sequence analyses is to remove these adapters and trim poor quality data. You can remove adapters"]},{"l":"Running Options"},{"l":"FASTQ file format","p":["There are a handful of \"accepted\" naming schemes for fastq file extensions, but Harpy only accepts a limited number of them, shown below. The fastq files must be bgzipped or gzipped and be"]},{"l":"Trimming Workflow","p":["Fastp is an ultra-fast all-in-one adapter remover, deduplicator, and quality trimmer. Harpy uses it to remove adapters, low-quality bases, and trim sequences down to a particular"]},{"l":"harpy trim outputs","p":["The harpy trim module creates a Trimming directory with the folder structure below. Sample1 and Sample2 are generic sample names for demonstration purposes."]}],[{"l":"Mapping Reads onto a Reference Genome","p":["Once sequences have been trimmed and passed through other QC filters, they will need to be aligned to a reference genome. This module within Harpy expects filtered reads as input,"]},{"l":"Running Options"},{"l":"FASTQ file format","p":["There are a handful of \"accepted\" naming schemes for fastq file extensions, but Harpy only accepts a limited number of them, shown below. The fastq files must be bgzipped or gzipped and be"]},{"l":"EMA workflow","p":["Since EMA does extra things to account for barcode information, the EMA workflow is a bit more complicated under the hood. Reads with barcodes are aligned using EMA and reads without valid barcodes are separately mapped using BWA before merging all the alignments together again."]},{"l":"EMA output","p":["The harpy align module creates an Alignments/ema directory with the folder structure below. Sample1 is a generic sample name for demonstration purposes."]},{"l":"BWA workflow"}],[{"l":"Calling Variants","p":["After reads have been aligned, e.g. with harpy align, you can use those alignment files(.bam) to call variants in your data. Harpy can call variants using bcftools mpileup, which calls SNPs and indels primarily, or with"]},{"l":"Running Options"},{"l":"sample grouping file","p":["This file is entirely optional and useful if you want variant calling to happen on a per-population level."]},{"l":"Workflows"},{"l":"bcftools mpileup","p":["The mpileup and call modules from bcftools(formerly samtools) are used to call variants from alignments. This is a tried-and-true method and one of methods featured in other variant"]},{"l":"Leviathan","p":["Leviathan is an alternative variant caller that uses linked read barcode information to call structural variants (indels, inversions, etc.) exclusively, meaning it does not call SNPs. Harpy first uses"]},{"l":"Individual-level variant calling","p":["When not using a population grouping file via --populations, variants will be called per-sample. Due to the nature of Structural Variant (SV) VCF files, there isn't an entirely fool-proof way"]},{"l":"Population-level variant calling","p":["With the inclusion of a population grouping file via --populations, Harpy will merge the bam files of all samples within a population and call SV's on these alignment pools. Preliminary work shows that this way identifies more variants and fewer false"]}],[{"l":"Impute Genotypes using Sequences","p":["After variants have been called, you may want to impute missing genotypes to get the most from your data. Harpy uses STITCH to impute genotypes, a haplotype-based method that is linked-read aware. Imputing genotypes requires a variant call file"]},{"l":"Running Options"},{"l":"Parameter file","p":["Typically, one runs STITCH multiple times, exploring how results vary with different model parameters. The solution Harpy uses for this is to have the user provide a tab-delimited dataframe file where the columns are the 5 STITCH model"]},{"l":"example"},{"l":"model"},{"l":"useBX"},{"l":"k"},{"l":"s"},{"l":"nGen"},{"l":"STITCH Workflow","p":["STITCH is a genotype imputation software developed for use in the R programming language. It has quite a few model parameters that can be tweaked, but HARPY only focuses on a small handful that have the largest impact on the quality of the results. Imputation is"]}],[{"l":"Phasing Haplotypes","p":["You may want to phase your genotypes into haplotypes, as haplotypes tend to be more informative than unphased genotypes (higher polymorphism, captures relationship between genotypes). Phasing"]},{"l":"Running Options","p":["The molecule distance is and pruning thresholds are considered the most impactful parameters for running HapCut2, therefore they are directly configurable from the command. The molecule distance"]},{"l":"Phasing Workflow","p":["Phasing is performed using HapCut2. Most of the tasks cannot be parallelized, but HapCut2 operates on a per-sample basis, so the workflow is parallelized across all of your samples to speed things along."]},{"l":"harpy phase outputs","p":["The harpy phase module creates an Phasing directory with the folder structure below. Sample1 is a generic sample name for demonstration purposes."]}],[{"l":"Software used in HARPY","p":["HARPY is the sum of its parts, and out of tremendous respect for the developers involved in the included software, we would like to highlight the tools directly involved in HARPY's many moving pieces."]}]]