#!/usr/bin/env python3

import subprocess
import os
from os.path import exists
import sys
import rich_click as click

click.rich_click.USE_MARKDOWN = True
click.rich_click.SHOW_ARGUMENTS = True
click.rich_click.ERRORS_SUGGESTION = "Try the '--help' flag for more information."
click.rich_click.ERRORS_EPILOGUE = "Usage information can be found in the docs [link=https://harpy.github.io]https://harpy.github.io[/link]"

@click.group()
def cli():
    """
    HARPY Haplotagging data processing pipeline.
    
    The pipeline trims reads, map sequences, calls variants, imputes genotypes, and phases haplotypes. 
    
    **trim ðŸ¡’ align ðŸ¡’ variants ðŸ¡’ impute ðŸ¡’ phase**
    
    **Documentation**: [https://pdimens.github.io/HARPY/#/](https://pdimens.github.io/HARPY/#/)
    """
    pass

@click.command()
@click.option('-d', '--dir', default = 'SeqRaw', show_default = True, type=click.Path(exists=True), help = 'Directory with sample sequences')
def trim(config, dir):
    '''Remove adapters and quality trim sequences'''
    print("this is a thing!")
    #snakemake --config rawseq_path=path

@click.command()
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, help = 'Genome assembly for read mapping')
@click.option('-d', '--dir', required = True, type=click.Path(exists=True), help = 'Directory with sample sequences')
@click.option('-e', '--ema-bins', default = 500, show_default = True, type = int, help="Number of barcode bins for EMA")
@click.option('-b', '--bwa', is_flag=True, help="Use BWA MEM instead of EMA (ignores bardcodes)")
@click.option('-t', '--threads', default = 4, show_default = True, type = int, help = 'Number of threads to use')
@click.option('-r', '--resume', is_flag=True, help="Resume an incomplete run")
def align(genome, threads, bwa, dir, resume, ema_bins):
    """
    Align sample sequences to a reference genome
    """
    if threads < 4:
        print(f"ERROR: Must provide at least 4 threads. Threads provided: {threads}")
        exit(1)
    fastqlist = [i for i in os.listdir(dir) if i.endswith('.fastq.gz')]
    fqext = "fq.gz" if not fastqlist else "fastq.gz"
    Rlist = [i for i in os.listdir(dir) if i.endswith('.R1.' + fqext)]
    Rsep = "_R" if not Rlist else ".R"
    fullext = Rsep + "1." + fqext
    samplenames = set([i.split(fullext)[0] for i in os.listdir(dir) if i.endswith(fullext)])
    if len(samplenames) < 1:
        print("ERROR: No sequence files ending with the expected file extentions found in " + dir + ".\nExpected extensions:\n  _R1.fastq.gz\n  .R1.fastq.gz\n  _R1.fq.gz\n  .R1.fq.gz")
        sys.exit(1)
    
    mapper = "ema" if not bwa else "bwa"
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/map-" + mapper + ".smk"]
    #command.append('--report')
    #command.append('harpy-align.html')
    #command.append('--report-stylesheet')
    #command.append('misc/harpy.css')
    if resume:
        command.append('--rerun-incomplete')
    command.append('--config')
    command.append(f"seq_directory={dir}")
    command.append(f"fqext={fqext}")
    command.append(f"Rsep={Rsep}")
    command.append(f"samplenames={samplenames}")
    command.append(f"genomefile={genome}")
    if not bwa:
        command.append(f"EMA_bins={ema_bins}")
    # debugging things
    #command.append('--dry-run')
    #command.append("--rulegraph")
    subprocess.run(command)

@click.command()
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, help = 'Genome assembly for variant calling')
@click.option('-d', '--dir', required = True, type=click.Path(exists=True), help = 'Directory with sequence alignments')
@click.option('-p', '--populations', default = 'none', show_default = True, type=str, help = 'Tab-delimited file of sample<tab>population')
@click.option('-x', '--ploidy', default = 2, show_default = True, type=int, help = 'Ploidy of samples')
@click.option('-l', '--leviathan', is_flag=True, help="Call variants with Leviathan instead of bcftools")
@click.option('-t', '--threads', default = 4, show_default = True, type = int, help = 'Number of threads to use')
@click.option('-r', '--resume', is_flag=True, help="Resume an incomplete run")
def variants(genome, threads, dir, populations, ploidy, leviathan, resume):
    """
    Call variants from sample alignments

    Use `--populations create` to create a simple sample grouping file (optional) from samples present in `--dir`  
    """
    samplenames = set([i.split('.bam')[0] for i in os.listdir(dir) if i.endswith(".bam")])
    if len(samplenames) < 1:
        print("ERROR: No alignment files (.bam) found in " + dir)
        sys.exit(1)

    # create popgroups with --populations create
    if populations.lower() == 'create':
        fout = "samples.groups"
        if exists("samples.groups"):
            overwrite = input("File \'samples.groups\' already exists, overwrite (no|yes)?  ").lower()
            if (overwrite == "no") or (overwrite == "n"):
                fout = input("Please suggest a different name for the output file: ")
            elif (overwrite == "yes") or (overwrite == "y"):
                fout = "samples.groups"
        print("\n" + '\033[1m' + "Samples detected in " + dir + ": " + str(len(samplenames)) + '\033[0m')
        with open(fout, "w") as file:
            for i in samplenames:
                file.write(i + '\t1\n') 
        print('Created sample population grouping file: ' + fout + '\nPlease review it, as all samples have been grouped into a single population')
        exit(0)
    elif populations.lower() != 'none':
        if not exists(populations):
            print("ERROR: sample populations file " + populations + " not found.")
            sys.exit(1)
    
    if threads < 4:
        print(f"ERROR: Must provide at least 4 threads. Threads provided: {threads}")
        exit(1)
    
    vcaller = "mpileup" if not leviathan else "leviathan"

    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/variantcall-" + vcaller + ".smk"]
    #command.append('--report')
    #command.append('VariantCall/harpy-variants.html')
    if resume:
        command.append('--rerun-incomplete')
    
    command.append('--config')
    command.append(f"seq_directory={dir}")
    command.append(f"samplenames={samplenames}")
    command.append(f"groupings={populations}")
    command.append(f"ploidy={ploidy}")
    command.append(f"genomefile={genome}")
    # debugging things
    #command.append('--dry-run')
    #command.append("--rulegraph")
    #print(" ".join(command))
    subprocess.run(command)

#@click.option('-f', '--filter', is_flag=True, help="Filter VCF file to keep SNPs with QUAL>20 and DP>10")
@click.command()
@click.option('-i', '--init', is_flag=True, help="Create example parameter file and exit")
@click.option('-v', '--vcf', required = True, type=click.Path(exists=True), help = 'Path to BCF/VCF file')
@click.option('-d', '--dir', required = True, type=click.Path(exists=True), help = 'Directory with sequence alignments')
@click.option('-p', '--parameters', default = 'stitch.params', required = True, show_default = True, type=click.Path(exists=True), help = 'STITCH parameter file (tab-delimited)')
@click.option('-t', '--threads', default = 4, show_default = True, type = int, help = 'Number of threads to use')
@click.option('-r', '--resume', is_flag=True, help="Resume an incomplete run")
def impute(parameters, dir, threads, vcf, resume, init):
    """
    Impute genotypes from genotype likelihoods
    
    Requires a parameter file, use **harpy impute --init** to generate one and modify it for your study.
    """
    if init:
        with open('stitch.params', "w") as file:
            file.write('model\tuseBX\tk\ts\tnGen\npseudoHaploid\tTRUE\t10\t5\t50\npseudoHaploid\tTRUE\t10\t1\t50\npseudoHaploid\tTRUE\t15\t10\t100')
        print("Created example parameter file \'stitch.params\'")
        print("Modify the model parameters as appropriate, but " + '\033[1m' + "DO NOT" + '\033[0m' + "add/remove columns")
        exit(0)
    
    if threads < 2:
        print(f"ERROR: Must provide at least 2 threads. Threads provided: {threads}")
        exit(1)

    samplenames = set([i.split('.bam')[0] for i in os.listdir(dir) if i.endswith(".bam")])
    if len(samplenames) < 1:
        print("ERROR: No alignment files (.bam) found in " + dir)
        sys.exit(1)
    
    contigfile = "Imputation/contigs/" + os.path.splitext(os.path.basename(vcf))[0] + ".contigs"
    if not exists(contigfile):
        print(f"Extracting contig names from {vcf}")
        os.makedirs("Imputation/contigs", exist_ok = True)
        with open(contigfile, "w") as fout:
            bcftools = subprocess.Popen(["bcftools", "query", "-f", '%CHROM\\n', f"{vcf}"], stdout = subprocess.PIPE)
            chromsort = subprocess.Popen(["sort"], stdin = bcftools.stdout, stdout = subprocess.PIPE)
            subprocess.run(["uniq"], stdin = chromsort.stdout, stdout = fout)
    else:
        print(f"Using existing file of contig names: {contigfile}")

    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/impute.smk"]
    if resume:
        command.append('--rerun-incomplete')
    command.append('--config')
    command.append(f"seq_directory={dir}")
    command.append(f"samplenames={samplenames}")
    command.append(f"variantfile={vcf}")
    command.append(f"contignames={contigfile}")
    command.append(f"paramfile={parameters}")
    command.append(f"filtervcf=False")
    subprocess.run(command)

       
@click.command()
@click.argument('config_file', default = 'harpy.yaml', type=click.Path(exists=True))
@click.option('-v', '--vcf', default = 'Variants.imputed.bcf', type=click.Path(exists=True), help = 'Path to imputed VCF file')
def phase(config_file):
    """
    Phase SNPs into haplotypes
    
    """
    print("this is another thing!")

cli.add_command(trim)
cli.add_command(align)
cli.add_command(variants)
cli.add_command(impute)
cli.add_command(phase)

if __name__ == '__main__':
    cli()



#@click.command()
#@click.option('-c', '--config', default = 'config.yaml', show_default = True, type=click.Path(), help = 'Name to give configuration file')
#def init(config):
#    '''Generate template configuration file'''
#    if exists(config):
#        overwrite = input(f"File \'{config}\' already exists, overwrite? (no|yes)  ")
#        outf = config
#        if (overwrite.lower() != "yes") and (overwrite.lower() != "y"):
#            outf = input("New name for the configuration file: ")
#    else:
#        outf = config
#    with open(f'{outf}', "w") as file:
#        file.write(
#'''
##-- Configuration file for HARPY --#
#
## Genome file for mapping and variant calling, in FASTA format
#genome_file: genome.fasta
#
###-- STITCH Imputation Paramters --##
#    # Parameters are project specific
#    # *DO NOT* rely on the default values
#    # See the docs for detailed info
#    # docs: https://pdimens.github.io/HARPY/#/
## Imputation method to use
#    # Options: diploid, pseudoHaploid, diploid-inbred
#method: pseudoHaploid
#
## Number of founder haplotypes to use
#K: 100
#
## Number of founder haplotypes to average results over
#S: 5
#
## Use haplotag barcodes to assist imputation? (True | False)
#    # If LD blocks are small, ignoring tags might be better
#useBarcodes: True
## Estimated number of generations since founding
#    # If uncertain, estimate using 4 * Ne / K
#    # (Ne = effective population size)
#nGenerations: 500
#'''
#    )
#    print('Created configuration file ' + outf)