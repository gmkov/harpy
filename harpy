#!/usr/bin/env python3

import subprocess
import os
from os.path import exists
import sys
import rich_click as click

click.rich_click.USE_MARKDOWN = True
click.rich_click.SHOW_ARGUMENTS = True
click.rich_click.ERRORS_SUGGESTION = "Try the '--help' flag for more information."
click.rich_click.ERRORS_EPILOGUE = "See the documentation: [link=https://pdimens.github.io/HARPY/#/]https://pdimens.github.io/HARPY/#/[/link]"

## recurring checks and such ##
def vcfcheck(vcf):
    vfile = vcf.lower()
    if vfile.endswith(".vcf") or vfile.endswith(".bcf") or vfile.endswith(".vcf.gz"):
        pass
    else:
        print(f"ERROR: Supplied variant call file ({vcf}) must end in one of [.vcf | .vcf.gz | .bcf]")
        exit(1)

def getnames(directory, ext):
    samplenames = set([i.split(ext)[0] for i in os.listdir(directory) if i.endswith(ext)])
    if len(samplenames) < 1:
        print(f"ERROR: No sample files ending with {ext} found in {directory}.")
        sys.exit(1)
    return samplenames


## the modules ##
@click.group()
def cli():
    """
    ## Haplotagging Research Pipeline (HARPY)

    ### version: 0.1
    
    The pipeline trims reads, maps sequences, calls variants, imputes genotypes,
    and phases haplotypes of Haplotagging data. 
    
    **trim ðŸ¡’ align ðŸ¡’ variants ðŸ¡’ impute ðŸ¡’ phase**
    
    **Documentation**: [https://pdimens.github.io/HARPY/#/](https://pdimens.github.io/HARPY/#/)
    """
    pass

@click.command()
@click.option('-d', '--directory', show_default = False, required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with raw sample sequences')
@click.option('-l', '--max-length', default = 150, show_default = True, type=int, metavar = "Integer", help = 'Maximum length to trim sequences down to')
@click.option('-x', '--extra-params', default = "", show_default = False, type = str, metavar = "String", help = 'Additional Fastp parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', default = "none", show_default = False, type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def trim(directory, max_length, extra_params, threads, snakemake):
    """
    Remove adapters and quality trim sequences
    """
    fastqlist = [i for i in os.listdir(directory) if i.endswith('.fastq.gz')]
    fqext = "fq.gz" if not fastqlist else "fastq.gz"
    Rlist = [i for i in os.listdir(directory) if i.endswith('.1.' + fqext)]
    Rsep = [".F.", ".R."] if not Rlist else [".1.", ".2."]
    fullext = [Rsep[0] + fqext, Rsep[1] + fqext]
    samplenames = getnames(directory, fullext[0])
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/trim.smk"]
    if snakemake != "none":
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    command.append(f"seq_directory={directory}")
    command.append(f"fqext={fullext}")
    command.append(f"samplenames={samplenames}")
    command.append(f"maxlen={max_length}")
    command.append(f"extra={extra_params}")
    subprocess.run(command)

@click.command()
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, metavar = "File Path", help = 'Genome assembly for read mapping')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sample sequences')
@click.option('-e', '--ema-bins', default = 500, show_default = True, type = click.IntRange(1,1000), metavar = "Integer", help="Number of barcode bins for EMA")
@click.option('-b', '--bwa', is_flag=True, help="Ignore barcodes and use BWA MEM instead of EMA")
@click.option('-x', '--extra-params', default = "", show_default = False, type = str, metavar = "String", help = 'Additional EMA-align/BWA parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 2, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', default = "none", show_default = False, type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def align(genome, threads, bwa, directory, ema_bins, extra_params, snakemake):
    """
    Align sample sequences to a reference genome
    """
    fastqlist = [i for i in os.listdir(directory) if i.endswith('.fastq.gz')]
    fqext = "fq.gz" if not fastqlist else "fastq.gz"
    Rlist = [i for i in os.listdir(directory) if i.endswith('.R1.' + fqext)]
    Rsep = "_R" if not Rlist else ".R"
    fullext = Rsep + "1." + fqext
    samplenames = getnames(directory, fullext)
    mapper = "ema" if not bwa else "bwa"
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/map-" + mapper + ".smk"]

    if snakemake != "none":
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    command.append(f"seq_directory={directory}")
    command.append(f"fqext={fqext}")
    command.append(f"Rsep={Rsep}")
    command.append(f"samplenames={samplenames}")
    command.append(f"genomefile={genome}")
    command.append(f"extra={extra_params}")
    if not bwa:
        command.append(f"EMA_bins={ema_bins}")
    subprocess.run(command)

@click.command()
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, metavar = "File Path", help = 'Genome assembly for variant calling')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments')
@click.option('-p', '--populations', default = 'none', show_default = True, type=str, metavar = "File Path or \'create\'", help = 'Tab-delimited file of sample<tab>population')
@click.option('-x', '--ploidy', default = 2, show_default = True, type=click.IntRange(1,12), metavar = "Integer", help = 'Ploidy of samples')
@click.option('-l', '--leviathan', is_flag=True, help="Call variants with Leviathan instead of bcftools")
@click.option('-x', '--extra-params', default = "", show_default = False, type = str, metavar = "String", help = 'Additional mpileup/leviathan parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', default = "none", show_default = False, type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def variants(genome, threads, directory, populations, ploidy, leviathan, extra_params, snakemake):
    """
    Call variants from sample alignments

    Use `--populations create` to create a simple sample grouping file (optional) from samples present in `--directory`  
    """
    samplenames = getnames(directory, '.bam')

    # create popgroups with --populations create
    if populations.lower() == 'create':
        fout = "samples.groups"
        if exists("samples.groups"):
            overwrite = input("File \'samples.groups\' already exists, overwrite (no|yes)?  ").lower()
            if (overwrite == "no") or (overwrite == "n"):
                fout = input("Please suggest a different name for the output file: ")
            elif (overwrite == "yes") or (overwrite == "y"):
                fout = "samples.groups"
        print("\n" + '\033[1m' + "Samples detected in " + directory + ": " + str(len(samplenames)) + '\033[0m')
        with open(fout, "w") as file:
            for i in samplenames:
                file.write(i + '\t1\n') 
        print('Created sample population grouping file: ' + fout + '\nPlease review it, as all samples have been grouped into a single population')
        exit(0)
    elif populations.lower() != 'none':
        if not exists(populations):
            print(f"ERROR: sample populations file {populations} not found.")
            sys.exit(1)
    
    if not os.path.exists(f"{genome}.fai"):
        bn = os.path.basename(genome)
        print(f"{bn}.fai not found, indexing {bn} with samtools faidx")
        subprocess.run(["samtools","faidx", genome])

    vcaller = "mpileup" if not leviathan else "leviathan"
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/variantcall-" + vcaller + ".smk"]
    if snakemake != "none":
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    command.append(f"groupings={populations}")
    command.append(f"ploidy={ploidy}")
    command.append(f"genomefile={genome}")
    command.append(f"extra={extra_params}")
    subprocess.run(command)

#@click.option('-f', '--filter', is_flag=True, help="Filter VCF file to keep SNPs with QUAL>20 and DP>10")
@click.command()
@click.option('-v', '--vcf', required = True, type=click.Path(exists=True),metavar = "File Path", help = 'Path to BCF/VCF file')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments (*.bam)')
@click.option('-p', '--parameters', default = 'stitch.params', required = True, show_default = True, type=str, metavar = "File Path or \'create\'", help = 'STITCH parameter file (tab-delimited)')
#@click.option('-x', '--extra-params', default = "", show_default = False, type = str, metavar = "String", help = 'Additional STITCH parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', default = "none", show_default = False, type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def impute(parameters, directory, threads, vcf, snakemake):
    """
    Impute genotypes from genotype likelihoods
    
    Requires a parameter file, use **harpy impute --init** to generate one and modify it for your study.
    """
    if parameters == 'create':
        with open('stitch.params', "w") as file:
            file.write('model\tuseBX\tk\ts\tnGen\npseudoHaploid\tTRUE\t10\t5\t50\npseudoHaploid\tTRUE\t10\t1\t50\npseudoHaploid\tTRUE\t15\t10\t100')
        print("Created example parameter file \'stitch.params\'")
        print("Modify the model parameters as appropriate, but " + '\033[1m' + "DO NOT" + '\033[0m' + "add/remove columns")
        exit(0)
    else:
        if not exists(parameters):
            print(f"ERROR: STITCH parameter file {parameters} not found.")
            sys.exit(1)
    
    vcfcheck(vcf)
    samplenames = getnames(directory, '.bam')
    
    contigfile = "Imputation/contigs/" + os.path.splitext(os.path.basename(vcf))[0] + ".contigs"
    if not exists(contigfile):
        print(f"Extracting contig names from {vcf}")
        os.makedirs("Imputation/contigs", exist_ok = True)
        with open(contigfile, "w") as fout:
            bcftools = subprocess.Popen(["bcftools", "query", "-f", '%CHROM\\n', f"{vcf}"], stdout = subprocess.PIPE)
            chromsort = subprocess.Popen(["sort"], stdin = bcftools.stdout, stdout = subprocess.PIPE)
            subprocess.run(["uniq"], stdin = chromsort.stdout, stdout = fout)
    else:
        print(f"Using existing file of contig names: {contigfile}")

    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/impute.smk"]
    if snakemake != "none":
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    command.append(f"variantfile={vcf}")
    command.append(f"contignames={contigfile}")
    command.append(f"paramfile={parameters}")
    command.append(f"filtervcf=False")
    #command.append(f"extra={extra_params}")
    subprocess.run(command)

       
@click.command()
@click.option('-v', '--vcf', required = True, type=click.Path(exists=True), metavar = "File Path", help = 'Path to BCF/VCF file')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments (*.bam)')
@click.option('-m', '--molecule-distance', default = 20000, show_default = True, type = int, metavar = "Integer", help = 'Base-pair distance delineating separate molecules')
@click.option('-p', '--prune-threshold', default = 7, show_default = True, type = click.IntRange(0,100), metavar = "Integer", help = 'PHRED-scale threshold (%) for pruning low-confidence SNPs (larger prunes more.)')
@click.option('-x', '--extra-params', default = "", show_default = False, type = str, metavar = "String", help = 'Additional HapCut2 parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 2, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', default = "none", show_default = False, type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def phase(vcf, directory, threads, molecule_distance, prune_threshold, snakemake):
    """
    Phase SNPs into haplotypes    
    """
    if vcf.lower().endswith(".vcf.gz"):
        print(f"ERROR: HapCut2 does not accept .vcf.gz file format. Please convert to .vcf or .bcf")
        exit(1)
    else:
        vcfcheck(vcf)
    samplenames = getnames(directory, '.bam')
    prune_threshold = prune_threshold / 100
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/phase.smk"]
    if resume:
        command.append('--rerun-incomplete')
    if snakemake != "none":
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    command.append(f"variantfile={vcf}")
    command.append(f"prune={prune_threshold}")
    command.append(f"molecule_distance={molecule_distance}")
    command.append(f"extra={extra_params}")
    subprocess.run(command)


cli.add_command(trim)
cli.add_command(align)
cli.add_command(variants)
cli.add_command(impute)
cli.add_command(phase)

if __name__ == '__main__':
    cli()