#!/usr/bin/env python3

import subprocess
import os
from os.path import exists
import sys
import rich_click as click

click.rich_click.USE_MARKDOWN = True
click.rich_click.SHOW_ARGUMENTS = True
#click.rich_click.STYLE_ERRORS_SUGGESTION = "magenta italic"
click.rich_click.ERRORS_SUGGESTION = "Try the '--help' flag for more information."
click.rich_click.ERRORS_EPILOGUE = "Usage information can be found in the docs [link=https://harpy.github.io]https://harpy.github.io[/link]"

@click.group()
def cli():
    """
    HARPY Haplotagging data processing pipeline.
    
    The pipeline trims reads, map sequences, calls variants, imputes genotypes, and phases haplotypes. 
    Get started by running **harpy init** to generate a configuration file and modify it to your needs. The workflow is:
    
    **init ðŸ¡’ trim ðŸ¡’ align ðŸ¡’ callvariants ðŸ¡’ impute ðŸ¡’ phase**
    
    **Documentation**: [https://pdimens.github.io/HARPY/#/](https://pdimens.github.io/HARPY/#/)
    """
    pass

@click.command()
@click.option('-c', '--config', default = 'config.yaml', show_default = True, type=click.Path(), help = 'Name to give configuration file')
def init(config):
    '''Generate template configuration file'''
    if exists(config):
        overwrite = input(f"File \'{config}\' already exists, overwrite? (no|yes)  ")
        if (overwrite != "yes") and (overwrite != "y"):
            print("Please suggest a different name for the configuration file and try again")
            quit()
    with open(f'{config}', "w") as file:
        file.write('# Configuration file for HARPY #\n\n')
        file.write('# Number of barcode bins for EMA (higher is more accurate, less performant)\n')
        file.write('EMA_bins: 500\n\n')
        file.write('# Genome to align reads to, in FASTA format\n')
        file.write('genome_file: genome.fasta\n\n')
        file.write('# Directory with untrimmed sequences\n')
        file.write('raw_seqs: RawSequences\n')
    print('Created configuration file ' + config)

@click.command()
@click.option('-o', '--output', default = 'samples.populations', show_default = True, type=click.Path(exists=False), help = 'Name to give output file')
@click.option('-d', '--dir', type=click.Path(exists=True), help = 'Directory with sample reads or alignments')
def popgroup(output, dir):
    '''Generate sample population grouping file\n\nFiles in chosen directory must end in .bam or some variant of .[fastq|fq].gz'''
    if exists(output):
        overwrite = input(f"File \'{output}\' already exists, overwrite? (no|yes)  ")
        if (overwrite != "yes") and (overwrite != "y"):
            print("Please suggest a different name for the population file and try again")
            quit()
    if len([i for i in os.listdir(dir) if i.endswith('.fastq.gz')]) > 0:
        ext = 'fastq.gz'
        Rlist = [i for i in os.listdir(dir) if i.endswith('.R1.' + ext)]
        Rsep = "_R" if not Rlist else ".R"
        fullext = Rsep + "1." + ext
        samplenames = set([i.split(fullext)[0] for i in os.listdir(dir) if i.endswith(fullext)])
    elif len([i for i in os.listdir(dir) if i.endswith('.fq.gz')]) > 0:
        ext = 'fq.gz'
        Rlist = [i for i in os.listdir(dir) if i.endswith('.R1.' + ext)]
        Rsep = "_R" if not Rlist else ".R"
        fullext = Rsep + "1." + ext
        samplenames = set([i.split(fullext)[0] for i in os.listdir(dir) if i.endswith(fullext)])
    elif len([i for i in os.listdir(dir) if i.endswith('.bam')]) > 0:
        ext = 'bam' 
        samplenames = set([i.split('.bam')[0] for i in os.listdir(dir) if i.endswith(ext)])
    else:
        print("ERROR: No sample files ending with the expected file extentions found in " + dir + ".\nExpected extensions:\n  _R1.fastq.gz\n  .R1.fastq.gz\n  _R1.fq.gz\n  .R1.fq.gz\n  .bam")
        sys.exit(1)
    print("Samples detected in " + dir + ": " + str(len(samplenames)))
    with open(f'{output}', "w") as file:
        for i in samplenames:
            file.write(i + '\t1\n')

    print('Created sample population grouping file ' + output + '. Please review it, as all samples have been grouped into a single population')

@click.command()
@click.option('-c', '--config', default = 'config.yaml', show_default = True, type=click.Path(exists=True), help = 'HARPY configuration yaml file')
@click.option('-d', '--dir', default = 'SeqRaw', show_default = True, type=click.Path(exists=True), help = 'Directory with sample sequences')
def trim(config, dir):
    '''Remove adapters and quality trim sequences'''
    print("this is a thing!")
    #snakemake --config rawseq_path=path

@click.command()
@click.option('-c', '--config', default = 'config.yaml', show_default = True, type=click.Path(exists=True), help = 'HARPY configuration yaml file')
@click.option('-d', '--dir', default = 'SeqTrimmed', show_default = True, type=click.Path(exists=True), help = 'Directory with sample sequences')
@click.option('-t', '--threads', default = 4, show_default = True, type = int, help = 'Number of threads to use')
@click.option('-b', '--bwa', is_flag=True, help="Use BWA MEM (ignores bardcodes) instead of EMA")
@click.option('-r', '--resume', is_flag=True, help="Resume an incomplete run")
def align(config, threads, bwa, dir, resume):
    """
    Align sample sequences to a reference genome
    
    If you don't have a configuration file, use **harpy init** to generate one and modify it for your project.
    """
    fastqlist = [i for i in os.listdir(dir) if i.endswith('.fastq.gz')]
    fqext = "fq.gz" if not fastqlist else "fastq.gz"
    Rlist = [i for i in os.listdir(dir) if i.endswith('.R1.' + fqext)]
    Rsep = "_R" if not Rlist else ".R"
    fullext = Rsep + "1." + fqext
    samplenames = set([i.split(fullext)[0] for i in os.listdir(dir) if i.endswith(fullext)])
    if len(samplenames) < 1:
        print("ERROR: No sequence files ending with the expected file extentions found in " + dir + ".\nExpected extensions:\n  _R1.fastq.gz\n  .R1.fastq.gz\n  _R1.fq.gz\n  .R1.fq.gz")
        sys.exit(1)
    
    mapper = "ema" if not bwa else "bwa"
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/map-" + mapper + ".smk", '--configfile', f"{config}"]
    #command.append('--report')
    #command.append('harpy-align.html')
    #command.append('--report-stylesheet')
    #command.append('misc/harpy.css')
    if resume:
        command.append('--rerun-incomplete')
    command.append('--config')
    command.append(f"seq_directory={dir}")
    command.append(f"fqext={fqext}")
    command.append(f"Rsep={Rsep}")
    command.append(f"samplenames={samplenames}")
    # debugging things
    #command.append('--dry-run')
    #command.append("--rulegraph")
    subprocess.run(command)

@click.command()
@click.option('-c', '--config', default = 'config.yaml', show_default = True, type=click.Path(exists=True), help = 'HARPY configuration yaml file')
@click.option('-d', '--dir', default = 'ReadMapping/align', show_default = True, type=click.Path(exists=True), help = 'Directory with sequence alignments')
@click.option('-l', '--leviathan', is_flag=True, help="Call variants with Leviathan instead of bcftools")
@click.option('-p', '--populations', default = 'none', show_default = True, type=str, help = 'Tab-delimited file of sample<tab>group')
@click.option('-t', '--threads', default = 4, show_default = True, type = int, help = 'Number of threads to use')
@click.option('-r', '--resume', is_flag=True, help="Resume an incomplete run")
def callvariants(config, threads, dir, populations, leviathan, resume):
    """
    Call variants from sample alignments
    
    If you don't have a configuration file, use **harpy init** to generate one and modify it for your project. If you plan on using `--populations` (it's optional) you may use **harpy popgroup** to generate a file for it.
    """
    samplenames = set([i.split('.bam')[0] for i in os.listdir(dir) if i.endswith(".bam")])
    if len(samplenames) < 1:
        print("ERROR: No alignment files (.bam) found in " + dir)
        sys.exit(1)

    if not leviathan:
        vcaller = "mpileup"
        n_regions = 0
        with open(config, "r") as conf:
            while True:
                line = conf.readline()
                if line.startswith("genome_file"):
                    genomefile = line.split(":")[-1].strip()
                    break
        print("Finding the number of contigs in " + genomefile, end = "...")
        try:
            fopen = open(genomefile, "r")
        except:
            fopen = open(os.readlink(genomefile), "r")
        while True:
            # Get next line from file
            line = fopen.readline(16)
            if line.startswith('>'):
                n_regions += 1
            # end of file is reached
            if not line:
                break
        fopen.close()
        print(n_regions)
    else:
        vcaller = "leviathan"
    command = ['snakemake', '--cores', f'{threads}', '--directory', '.', '--snakefile', "rules/variantcall-" + vcaller + ".smk", '--configfile', f"{config}"]
    if resume:
        command.append('--rerun-incomplete')
    command.append('--config')
    command.append(f"seq_directory={dir}")
    command.append(f"samplenames={samplenames}")
    command.append(f"popfile={populations}")
    command.append(f"n_regions={n_regions}")
    if populations != 'none':
        if not exists(populations):
            print("ERROR: sample populations file " + populations + " not found.")
            sys.exit(1)
    # debugging things
    #command.append('--dry-run')
    #command.append("--rulegraph")
    subprocess.run(command)


@click.command()
@click.argument('config_file', default = 'harpy.yaml', type=click.Path(exists=True))
@click.option('-p', '--path', default = 'SequencesTrimmed', type=click.Path(exists=True), help = 'Path to trimmed sequences')
@click.option('-v', '--vcf', default = 'Variants.likelihoods.bcf', type=click.Path(exists=True), help = 'Path to VCF file')
def impute(config_file):
    """
    Impute genotypes from genotype likelihoods
    
    If you don't have a configuration file, use **harpy init** to generate one and modify it for your project.
    """

@click.command()
@click.argument('config_file', default = 'harpy.yaml', type=click.Path(exists=True))
@click.option('-v', '--vcf', default = 'Variants.imputed.bcf', type=click.Path(exists=True), help = 'Path to imputed VCF file')
def phase(config_file):
    """
    Phase SNPs into haplotypes
    
    If you don't have a configuration file, use **harpy init** to generate one and modify it for your project.
    """
    print("this is another thing!")

cli.add_command(init)
cli.add_command(popgroup)
cli.add_command(trim)
cli.add_command(align)
cli.add_command(callvariants)
cli.add_command(impute)
cli.add_command(phase)

if __name__ == '__main__':
    cli()