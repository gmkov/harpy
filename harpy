#!/usr/bin/env python3

import subprocess
import os
from os.path import exists
import sys
import rich_click as click

click.rich_click.USE_MARKDOWN = True
click.rich_click.SHOW_ARGUMENTS = False
click.rich_click.SHOW_METAVARS_COLUMN = False
click.rich_click.APPEND_METAVARS_HELP = False
click.rich_click.ERRORS_SUGGESTION = "Try the '--help' flag for more information."
click.rich_click.ERRORS_EPILOGUE = "See the documentation: [link=https://pdimens.github.io/HARPY/]https://pdimens.github.io/HARPY/[/link]"

## recurring checks and such ##
def vcfcheck(vcf):
    vfile = vcf.lower()
    if vfile.endswith(".vcf") or vfile.endswith(".bcf") or vfile.endswith(".vcf.gz"):
        pass
    else:
        print(f"ERROR: Supplied variant call file ({vcf}) must end in one of [.vcf | .vcf.gz | .bcf]")
        exit(1)

def getnames(directory, ext):
    samplenames = set([i.split(ext)[0] for i in os.listdir(directory) if i.endswith(ext)])
    if len(samplenames) < 1:
        print(f"ERROR: No sample files ending with {ext} found in {directory}.")
        sys.exit(1)
    return samplenames

# Nicer version for init
def getnames_err(directory, ext):
    samplenames = set([i.split(ext)[0] for i in os.listdir(directory) if i.endswith(ext)])
    if len(samplenames) < 1:
        raise Exception("No sample files ending with {ext} found in {directory}.")
    return samplenames

# find fastq extension types
def fq_extension(directory):
    ext = set()
    rsep = set()
    err = ""
    for i in os.listdir(directory):
        if i.endswith(".fastq.gz") | i.endswith(".fq.gz"):
            sep = i.split(".")
            fq = ".".join(sep[-2:])          
            ext.add(fq)
            base = i.split(f".{fq}")[0]
            rsp = "".join(base[-2:]).lstrip('^_.-')
            rsep.add(rsp)
    if len(ext) < 1:
        print(f"ERROR: No fastq.gz or fq.gz files identified in {directory}")
        sys.exit(1)
    if len(ext) > 1:
        err += f"- multiple file extensions detected: {ext}.\n  - format your files so there's only one style of .fq.gz | .fastq.gz\n"
    if len(rsep) > 2:
        err += f"- multiple read forward/reverse styles detected: {rsep}\n  - format your files so there's only one style of .1. | .F. | .R1.\n"
    if err != "":
        print("ERROR:\n" + err)
        sys.exit(1)
    return (f"{list(ext)[0]}", sorted(rsep))


## the modules ##
click.rich_click.OPTION_GROUPS = {
    "harpy trim": [
        {
            "name": "Configuration",
            "options": ["--directory", "--max-length", "--extra-params"],
        },
        {
            "name": "Other Options",
            "options": ["--threads", "--snakemake", "--help"],
        },
    ],
    "harpy align": [
        {
            "name": "Configuration",
            "options": ["--genome", "--directory", "--quality-filter", "--ema-bins", "--bwa", "--extra-params"],
        },
        {
            "name": "Other Options",
            "options": ["--threads", "--snakemake", "--help"],
        },
    ],
    "harpy variants": [
        {
            "name": "Configuration",
            "options": ["--genome", "--directory", "--populations", "--ploidy", "--leviathan", "--extra-params"],
        },
        {
            "name": "Other Options",
            "options": ["--threads", "--snakemake", "--help"],
        },
    ],
    "harpy impute": [
        {
            "name": "Configuration",
            "options": ["--vcf", "--directory", "--parameters"],
        },
        {
            "name": "Other Options",
            "options": ["--threads", "--snakemake", "--help"],
        },
    ],
    "harpy phase": [
        {
            "name": "Configuration",
            "options": ["--vcf", "--directory", "--molecule-distance", "--prune-threshold", "--extra-params"],
        },
        {
            "name": "Other Options",
            "options": ["--threads", "--snakemake", "--help"],
        },
    ]
}

@click.group(options_metavar='', context_settings=dict(help_option_names=["-h", "--help"]))
@click.version_option("0.1", prog_name="Harpy")
def cli():
    """
    ## Haplotagging Research Pipeline (HARPY)
    
    The pipeline trims reads, maps sequences, calls variants, imputes genotypes,
    and phases haplotypes of Haplotagging data. 
    
    **trim ðŸ¡’ align ðŸ¡’ variants ðŸ¡’ impute ðŸ¡’ phase**
    
    **Documentation**: [https://pdimens.github.io/HARPY/](https://pdimens.github.io/HARPY/)
    """
    pass

@click.command(no_args_is_help = True)
@click.option('-p', '--popgroup', required = False, type=click.Path(exists=True), metavar = "Input folder Path", help = 'Create generic sample-group file using existing sample file names (fq.gz or bam)')
@click.option('-s', '--stitch-params', type=str, metavar = "Output file name", help = 'Create template STITCH parameter file')
@click.option('-h', '--hpc', type = click.Choice(["slurm", "sge"], case_sensitive = False), help = 'Create HPC scheduling profile')
def extra(popgroup, stitch_params, hpc):
    """
    Create various associated/necessary files

    With this command you can generate a sample grouping file (for variant calling),
    a templace STITCH parameter file (for imputation), and a HPC profile for running
    Harpy on a cluster. You can use any combination of options at a time. 
    """
    if popgroup is not None:
        print('\033[1m' + "<><> Sampling Grouping File <><>" + '\033[0m')
        try:
            samplenames = getnames_err(popgroup, '.bam')
        except:
            try:
                samplenames = set([i[:-2].rstrip('_.^') for i in getnames_err(popgroup, '.fastq.gz')])
            except:
                try:
                    samplenames = set([i[:-2].rstrip('_.^') for i in getnames_err(popgroup, '.fq.gz')])
                except:
                    print(f"ERROR: No files ending in fq.gz, fastq.gz, or .bam found in {popgroup}")
                    sys.exit(1)

        print(f"Samples detected in {popgroup}: " + str(len(samplenames)))
        fout = "samples.groups"
        if exists("samples.groups"):
            overwrite = input("File \'samples.groups\' already exists, overwrite (no|yes)?  ").lower()
            if (overwrite == "no") or (overwrite == "n"):
                fout = input("Please suggest a different name for the output file: ")
            elif (overwrite == "yes") or (overwrite == "y"):
                fout = "samples.groups"
        with open(fout, "w") as file:
            for i in samplenames:
                file.write(i + '\t1\n') 
        print('Created sample population grouping file: ' + fout + '\nPlease review it, as all samples have been grouped into a single population\n')

    if stitch_params is not None:
        print('\033[1m' + "<><> STITCH Parameter File <><>" + '\033[0m')
        with open(stitch_params, "w") as file:
            file.write('model\tuseBX\tk\ts\tnGen\npseudoHaploid\tTRUE\t10\t5\t50\npseudoHaploid\tTRUE\t10\t1\t50\npseudoHaploid\tTRUE\t15\t10\t100')
        print(f"Created example parameter file: {stitch_params}")
        print("Modify the model parameters as needed, but " + '\033[1m' + "DO NOT" + '\033[0m' + " add/remove columns")

    if hpc is not None:
        print('\033[1m' + "<><> HPC Profile <><>" + '\033[0m')
        subprocess.run(["utilities/hpc_profile.py", hpc])


@click.command(no_args_is_help = True)
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with raw sample sequences')
@click.option('-l', '--max-length', default = 150, show_default = True, type=int, metavar = "Integer", help = 'Maximum length to trim sequences down to')
@click.option('-x', '--extra-params', type = str, metavar = "String", help = 'Additional Fastp parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def trim(directory, max_length, extra_params, threads, snakemake):
    """
    Remove adapters and quality trim sequences
    """
    # extension guessing
    fqext, Rsep = fq_extension(directory)
    try:
        fullext = [f".{Rsep[0]}.{fqext}", f".{Rsep[1]}.{fqext}"]
        samplenames = getnames_err(directory, fullext[0])
    except:
        try:
            fullext = [f"_{fqext[1][0]}.{fqext[0]}", f"_{fqext[1][1]}.{fqext[0]}"]
            samplenames = getnames_err(directory, fullext[0])
        except:
            print(f"ERROR: No fastq files with acceptable names found in {directory}")
            print("Check that the files conform to [.1. | .F.][.fastq | .fq].gz")
            print("Read the documentation for details: https://pdimens.github.io/HARPY/modules/qualitytrimming/")
    command = f'snakemake --cores {threads} --directory . --snakefile rules/trim.smk'.split()
    if snakemake is not None:
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    directory = directory.rstrip("/^")
    command.append(f"seq_directory={directory}")
    command.append(f"fqext={fullext}")
    command.append(f"samplenames={samplenames}")
    command.append(f"maxlen={max_length}")
    if extra_params is not None:
        command.append(f"extra={extra_params}")
    subprocess.run(command)

@click.command(no_args_is_help = True)
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, metavar = "File Path", help = 'Genome assembly for read mapping')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sample sequences')
@click.option('-e', '--ema-bins', default = 500, show_default = True, type = click.IntRange(1,1000), metavar = "Integer", help="Number of barcode bins for EMA")
@click.option('--bwa', is_flag=True, metavar = "Toggle", help="Use BWA MEM instead of EMA (ignore BX)")
@click.option('-q', '--quality-filter', default = 20, show_default = True, type = click.IntRange(min = 0, max = 40), metavar = "Integer", help = 'Minimum mapping quality to pass filtering')
#@click.option('--bx-markdup', is_flag=True, metavar = "Toggle", help = 'Mark duplicates using BX barcodes (--bwa only)')
@click.option('-x', '--extra-params', type = str, metavar = "String", help = 'Additional EMA-align/BWA parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 2, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def align(genome, threads, bwa, directory, ema_bins, extra_params, quality_filter, snakemake):
    """
    Align sample sequences to a reference genome

    The default is to use the BX barcode-aware EMA aligner. You may choose to use
    BWA MEM instead with `--bwa` and ignore the BX barcodes.
    """
    # extension guessing
    fqext, Rsep = fq_extension(directory)
    try:
        fullext = [f".{Rsep[0]}.{fqext}", f".{Rsep[1]}.{fqext}"]
        samplenames = getnames_err(directory, fullext[0])
    except:
        try:
            fullext = [f"_{fqext[1][0]}.{fqext[0]}", f"_{fqext[1][1]}.{fqext[0]}"]
            samplenames = getnames_err(directory, fullext[0])
        except:
            print(f"ERROR: No fastq files with acceptable names found in {directory}")
            print("Check that the files conform to [.1. | | .F. | .R1.][.fastq | .fq].gz")
            print("Read the documentation for details: https://pdimens.github.io/HARPY/modules/readmapping/")
            sys.exit(1)
    mapper = "ema" if not bwa else "bwa"
    command = f'snakemake --cores {threads} --directory . --snakefile rules/align-{mapper}.smk'.split()
    if snakemake is not None:
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    directory = directory.rstrip("/^")
    command.append(f"seq_directory={directory}")
    command.append(f"fqext={fqext}")
    command.append(f"Rsep={Rsep}")
    command.append(f"samplenames={samplenames}")
    command.append(f"genomefile={genome}")
    command.append(f"EMA_bins={ema_bins}")
    command.append(f"quality={quality_filter}")
    #if bx_markdup is not None:
    #    command.append(f"BXmarkdup=True")
    #else:
    #    command.append(f"BXmarkdup=False")
    if extra_params is not None:
        command.append(f"extra={extra_params}")
    subprocess.run(command)

@click.command(no_args_is_help = True)
@click.option('-g', '--genome', type=click.Path(exists=True), required = True, metavar = "File Path", help = 'Genome assembly for variant calling')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments')
@click.option('-p', '--populations', type=click.Path(exists = True), metavar = "File Path", help = 'Tab-delimited file of sample<tab>population')
@click.option('-x', '--ploidy', default = 2, show_default = True, type=click.IntRange(1,12), metavar = "Integer", help = 'Ploidy of samples')
@click.option('-l', '--leviathan', is_flag=True, metavar = "Toggle", help="Call variants with Leviathan instead of bcftools")
@click.option('-x', '--extra-params', type = str, metavar = "String", help = 'Additional mpileup/leviathan parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def variants(genome, threads, directory, populations, ploidy, leviathan, extra_params, snakemake):
    """
    Call variants from sample alignments

    Use `harpy extra --popgroup` to create a sample grouping file (optional) from samples files  
    """
    samplenames = getnames_err(directory, '.bam')
    vcaller = "mpileup" if not leviathan else "leviathan"
    if vcaller == "leviathan" and populations is not None:
        vcaller = "leviathan-pop"
    command = (f'snakemake --cores {threads} --directory . --snakefile rules/variants-{vcaller}.smk').split()
    if snakemake is not None:
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    directory = directory.rstrip("/^")
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    if populations is not None:
        command.append(f"groupings={populations}")
    command.append(f"ploidy={ploidy}")
    command.append(f"genomefile={genome}")
    if extra_params is not None:
        command.append(f"extra={extra_params}")
    subprocess.run(command)

#@click.option('-f', '--filter', is_flag=True, help="Filter VCF file to keep SNPs with QUAL>20 and DP>10")
@click.command(no_args_is_help = True)
@click.option('-v', '--vcf', required = True, type=click.Path(exists=True),metavar = "File Path", help = 'Path to BCF/VCF file')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments (*.bam)')
@click.option('-p', '--parameters', required = True, type=click.Path(exists=True), metavar = "File Path", help = 'STITCH parameter file (tab-delimited)')
#@click.option('-x', '--extra-params', default = "", type = str, metavar = "String", help = 'Additional STITCH parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 4, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake', type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def impute(parameters, directory, threads, vcf, snakemake):
    """
    Impute genotypes using variants and sequences
    
    Requires a parameter file, use **harpy extra --stitch-params** to generate one and adjust it for your study.
    """
    vcfcheck(vcf)
    samplenames = getnames(directory, '.bam')
    command = f'snakemake --cores {threads} --directory . --snakefile rules/impute.smk'.split()
    if snakemake is not None:
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    directory = directory.rstrip("/^")
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    command.append(f"variantfile={vcf}")
    command.append(f"paramfile={parameters}")
    command.append(f"filtervcf=False")
    #command.append(f"extra={extra_params}")
    subprocess.run(command)

@click.command(no_args_is_help = True)
@click.option('-v', '--vcf', required = True, type=click.Path(exists=True), metavar = "File Path", help = 'Path to BCF/VCF file')
@click.option('-d', '--directory', required = True, type=click.Path(exists=True), metavar = "Folder Path", help = 'Directory with sequence alignments (*.bam)')
@click.option('-m', '--molecule-distance', default = 20000, show_default = True, type = int, metavar = "Integer", help = 'Base-pair distance delineating separate molecules')
@click.option('-p', '--prune-threshold', default = 7, show_default = True, type = click.IntRange(0,100), metavar = "Integer", help = 'PHRED-scale threshold (%) for pruning low-confidence SNPs (larger prunes more.)')
@click.option('-x', '--extra-params', type = str, metavar = "String", help = 'Additional HapCut2 parameters, in quotes')
@click.option('-t', '--threads', default = 4, show_default = True, type = click.IntRange(min = 2, max_open = True), metavar = "Integer", help = 'Number of threads to use')
@click.option('-s', '--snakemake',  type = str, metavar = "String", help = 'Additional Snakemake parameters, in quotes')
def phase(vcf, directory, threads, molecule_distance, prune_threshold, snakemake, extra_params):
    """
    Phase SNPs into haplotypes 
    """
    vcfcheck(vcf)
    if vcf.lower().endswith(".vcf.gz"):
        print(f"Notice: HapCut2 does not accept gzipped vcf files. Converting to bcf.")
        variantfile = vcf[0:-7] + ".bcf"
        subprocess.run(f"bcftools view {vcf} -Ob > {variantfile}".split())
    else:
        variantfile = vcf
    samplenames = getnames(directory, '.bam')
    prune_threshold /= 100
    command = f'snakemake --cores {threads} --directory . --snakefile rules/phase.smk'.split()
    if snakemake is not None:
        [command.append(i) for i in snakemake.split()]
    command.append('--config')
    directory = directory.rstrip("/^")
    command.append(f"seq_directory={directory}")
    command.append(f"samplenames={samplenames}")
    command.append(f"variantfile={variantfile}")
    command.append(f"prune={prune_threshold}")
    command.append(f"molecule_distance={molecule_distance}")
    if extra_params is not None:
        command.append(f"extra={extra_params}")
    subprocess.run(command)

cli.add_command(extra)
cli.add_command(trim)
cli.add_command(align)
cli.add_command(variants)
cli.add_command(impute)
cli.add_command(phase)

if __name__ == '__main__':
    cli()